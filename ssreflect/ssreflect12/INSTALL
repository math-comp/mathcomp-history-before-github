INSTALLATION PROCEDURE FOR SSREFLECT WITH COQ 8.1 SYSTEM
--------------------------------------------------------


Summary: - Requirements - Compiling the theories - Customisation of
the Proof General Emacs interface - Compiling a Coqide interface for
ssreflect

REQUIREMENTS 
============ 
- Sources of the Coq v8.2pl1 (or Coq v8.2) system 
- Ocaml version >= 3.6 but <= 3.10.0 
- Gnu make version 3.81 or later

Note that to compile the sources of the Coq system, you also need a C
compiler.

Note that for Coqide, you need the Lablgtk development files and the
GTK libraries.

We describe the installation of ssreflect for Linux, Windows+Cygwin
and MacOS operating systems.

PRODUCING THE SSRCOQ TOPLEVEL 
=============================

We propose hereafter a way of compiling and installing (locally)
ssreflect from standard 8.2pl1(or 8.2) sources.  Experienced Coq
users may of course prefer and adopt different architecture choices.


- Make sure that you do not have any environment variable named COQLIB
or COQBIN. If you are a Windows+Cygwin user, make sure that no such
variable occurs in NEITHER Windows NOR Cygwin environment variables.

- If you are a Windows+Cygwin user, then open a Cygwin console.

- Download and unpack the sources of the current version 8.2pl1
(or 8.2) of Coq.
  The sample directory and file names given above refer to the
    coq-8.2pl1.tar.gz archive. We suppose that this action has created
a directory called <my-coq-location>/coq-8.2pl1/bin.  Warning: If you
are a Windows user, make sure that the place where you unpack the
sources should not be under a directory containing a space in its name
(like " Documents and Settings" ...) otherwise the next step will
fail.

- Follow the instructions contained in the Coq sources to quickly
install Coq locally, briefly:
	- in the directory of the sources, execute the commands:
                ./configure -opt -local
	(this builds the Makefile for the local installation)
	  	make world
	(this compiles the whole stuff) - DO NOT erase Coq sources by
executing a make clean after the make world command.  - If you get an
error message complaining about Coqide, skip it,
  you still have succeeded in compiling all what is necessary for
  ssreflect (without the Coqide interface).

- In your <my-coq-location>/coq-8.2pl1/bin directory, you should find
an
   executable file called coqtop, which is the Coq toplevel.

- Set two environment variables COQTOP and COQLIB both
  to the value <my-coq-location>/coq-8.2pl1/.

- Set an environment variable COQBIN to the value
<my-coq-location>/coq-8.2pl1/bin/.

- Add the <my-coq-location>/coq-8.2pl1/bin location to your PATH
variable.  If you are a Windows user, you may also add these variables
as Windows environment variables and update your Windows path.  Also
make sure that the PATH variable of the system contains your directory
<my-coq-location>/cygwin/bin.

- Copy the src/ssreflect.ml4 file of the present ssreflect archive in
the <my-coq-location>/coq-8.2pl1 directory.

- In the <my-coq-location>/coq-8.2pl1 directory, execute the command:
         make ssreflect.cmx

Note for Mac OS users on a PowerPC: At this point, if you did not
include the -opt argument at the ./configure step above, then replace
the previous command by
	make OCAMLOPT=ocamlopt.opt ssreflect.cmx.  
Otherwise you may encounter a "stack overflow" error message.

- Now you can build the ssreflect toplevel, by executing in the
<my-coq-location>/coq-8.2pl1 directory the command:
	coqmktop -opt -o bin/ssrcoq ssreflect.cmx 
Note: If the system complains about a missing gramlib.cmxa, then find
the place where this camlp4 library is installed (typing for
  example locate gramlib.cmxa), and try again the command:
        coqmktop -opt -R /rep/where/gramlib/is/ -o ssrcoq ssreflect.cmx


- Make sure the <my-coq-location>/coq-8.2pl1/bin/ location is
permanently added to your PATH variable.

COMPILING THE THEORIES 
======================

- Go into the directory of the ssreflect archive.
- Produce a Coq Makefile with the command:
	coq_makefile -f Make -o Makefile 
- Now a command:
	make 
produces all the .vo files compiled from the .v files of the
distribution.


You can use this ssrcoq executable to compile vernacular .v files with
the -compile flag (this also avoids the synchronisation problems for
coqc under the Windows OS). For instance:
	  ssrcoq -compile ssreflect.v 
produces the ssreflect.vo binary file.

Every Coq vernacular file processed by ssrcoq should import the
ssreflect library with the line:
	  Require Import ssreflect.

The tactics described in the documentation doc/SsrDoc of the ssreflect
distribution will not work properly without this library. Obviously,
the ssreflect.vo file created by the command line above also needs to
be in the library path.


CUSTOMISATION OF THE PROOF GENERAL EMACS INTERFACE
==================================================

The ssreflect distribution comes with a small configuration file
src/pg-ssr.el to extend ProofGeneral (PG), a generic interface for
proof assistants based on the customisable text editor Emacs, to the
syntax of ssreflect.

The >= 3.7 versions of ProofGeneral support this extension.

- Following the installation instructions, unpack the sources of PG in
a directory, for instance <my-pgssr-location>/ProofGeneral-3.7, and add
the following line to your .emacs file:
  - under Unix/MacOS:
	(load-file
    "<my-pg-location>/ProofGeneral-3.7/generic/proof-site.el" )
  - under Windows+Cygwin:
	(load-file
    "C:\\<my-pg-location>\\ProofGeneral-3.7\\generic\\proof-site.el")
where <my-pg-location> is the location of your own ProofGeneral
directory.

-Immediately after the previous line added to your .emacs, add this
one:
	(load-file "<my-pgssr-location>/pg-ssr.el") respectively
	(load-file "<my-pgssr-location>\\pg-ssr.el") for Windows+Cygwin
users, where <my-pgssr-location> is the location of your pg-ssr.el file.

Coq sources have a .v extension. Opening any .v file should
automatically launch ProofGeneral. Try this on a foo.v file.

In the menu 'ProofGeneral', choose the item:
	'Advanced/Customize/Coq/Coq Prog Name' Change the value of the
variable to
	 <my-coq-location>/bin/ssrcoq 
or
	<my-coq-location>\\bin\\ssrcoq 
for Windows+Cygwin users, where <my-coq-location> is the location of
your coq-8.2pl1 directory.



COMPILING A COQIDE INTERFACE FOR SSREFLECT
==========================================

Alternatively, you can build a customized Coqide interface linked with
ssreflect.  At the root <my-coq-location>/coq-8.2pl1 of the directory
of the sources of Coq, execute the command:
	coqmktop -ide -opt -o bin/ssrcoqide ssreflect.cmx This creates
an ssrcoqide executable, which can use as an interface to develop your
theories to be compiled with ssrcoq. See Chapter 14 of the Coq
Reference Manual (http://coq.inria.fr/coq/distrib/current/refman/) for
more information on how to use and configure Coqide.

