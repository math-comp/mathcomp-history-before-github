Require Import ssreflect ssrbool ssrfun eqtype ssrnat seq div.
Require Import fintype paths finfun ssralg bigops finset prime.
Require Import groups action morphisms group_perm automorphism normal cyclic.

Set Implicit Arguments.
Unset Strict Implicit.
Import Prenex Implicits.

Import GroupScope.

(**********************************************************************)
(* Standard group notions and constructions based on the prime        *)
(* decomposition of the order of the group or its elements.           *)
(* -Predicates/definitions:                                           *)
(*   pgroup p P, pi_group pi H                                        *)
(*        <-> primes #|P| / #|H| is included in {p}/pi (p prime)      *)
(*   p_elt p x, pi_elt p x                                            *)
(*        <-> pgroup p <<[set x]>>, pi_group pi <<[set x]>>           *)
(*   sylow p G P, hall pi G H                                         *)
(*        <-> P/H is a p/pi subgroup of G,                            *)
(*            primes #|G : P| / #|G : H| disjoint from {p}/pi         *)
(*   'Syl_p(G), 'Hall_pi(G)                                           *)
(*        == set of the sylow p / hall pi subgroups of G              *)
(*   is_pgroup P, is_sylow G P, is_hall G H                           *)
(*        <-> pgroup p P, sylow p G P, hall pi G H for some p/pi      *)
(*   exponent G                                                       *)
(*        == \big[lcmn/1]_(x \in G) #[x].                             *)
(*   abelem p E                                                       *)
(*        <-> E is an elementary abelian p-group                      *)
(*   elementary_abelian E                                             *)
(*        <-> E is elementary abelian (abelem p E for some p)         *)
(*   'E_p(G), 'E_p^n(G), 'E_p^*(G), 'E^n(G)                           *)
(*        == the set of abelem p subgroups of G                       *)
(*           (resp., p-abelem of order p ^ n (<=> of rank n),         *)
(*            maximal p-abelem, elementary_abelian of rank n)         *)
(*   'm_p(G)                                                          *)
(*        == the p-rank of G (max of logn p #|E| for E in 'E_p(G))    *)
(*   'm(G)                                                            *)
(*        == the rank of G (max of 'r_p(G) for all p)                 *)
(*   basis G X                                                        *)
(*        <-> X is a basis for the abelian group G                    *)
(*   abel_type P                                                      *)
(*        == the abelian type of P, when P is an abelian p-group,     *)
(*           i.e., the sorted seq of #[x] for x in a basis X of P     *)
(*   homocyclic P                                                     *)
(*        == P is an abelian p-group whose abelian type is constant   *)
(*   'Ohm_n(P)                                                        *)
(*        == <<[set x \in P | x ^+ (pdiv #|P| ^ n) == 1]>>            *)
(*   'Mho^n(P)                                                        *)
(*        == the group generated by x ^+ (pdiv #|P| ^ n) for x in P   *)
(*   'O_pi(G)                                                         *)
(*        == the pi-core (the largest normal pi-subgroup) of G        *)
(*           (the first term in the upper pi-series of G)             *)
(*           (relevant lemmas quote core)                             *)
(*   'O_{pi2, pi1}(G)                                                 *)
(*       == the pi1, pi2 -core of G, such that                        *)
(*          'O_{pi2, pi1}(G) / 'O_pi2(G) = 'O_pi1(G / 'O_pi2(G))      *)
(*     with 'O_pi2(G) <| 'O_{pi2, pi1}(G) <| G                        *)
(*   'O_{pi3, pi2, pi1}(G)                                            *)
(*       == the pi1, pi2, pi3 -core of G, similarly                   *)
(*   p_length_1 p G                                                   *)
(*        <-> trivg 'O_{p^', p, p^'}(G)                               *)
(* Note that notions are always defined on sets even though their     *)
(* name indicates "group" properties; the actual definition of the    *)
(* notion never tests for the group property, since this property     *)
(* will always be provided by a (canonical) group structure.          *)
(**********************************************************************)

Section PgroupDefs.
  
Variable gT : finGroupType.
Implicit Type pi : nat_pred.
Implicit Types x y z : gT.
Implicit Types A B X : {set gT}.

Definition pgroup pi A := p_nat pi #|A|.

Definition is_pgroup A := pgroup (pdiv #|A|) A.

Definition p_elt pi x := pgroup pi <[x]>.

Definition hall pi A B := (B \subset A) && (#|B| == p_part pi #|A|).

Definition Hall pi A := [set H : {group gT} | hall pi A H].

Definition sylow (p : nat) := hall p.

Definition Syl p A := [set P : {group gT} | sylow p A P].

Definition is_hall A B := (B \subset A) && coprime #|B| #|A : B|.

Definition is_sylow A B := sylow (pdiv #|B|) A B.

Definition hall_set pi A := [set G : {group gT} | hall pi A G].

Definition sylow_set (p : nat) := hall_set p.

Definition p_core pi A :=
  << \bigcup_(G : {group gT} | pgroup pi G && (G <| A)) G >>.

Definition Ohm i A := <<[set x \in A | x ^+ (pdiv #|A| ^ i) == 1]>>.

Definition Mho i A := << expgn^~ (pdiv #|A| ^ i)%N @: A >>.

Definition exponent A := \big[lcmn/1%N]_(x \in A) #[x].

Definition abelem p A := abelian A && (exponent A %| p).

Definition elementary_abelian A := abelem (pdiv #|A|) A.

Definition Elem p A :=
  [set E : {group gT} | (E \subset A) && abelem p E].

Definition Elem_order p n A :=
  [set E : {group gT} | (E \subset A) && abelem p E && (#|E| == p ^ n)%N].

Definition Elem_rank n A := \bigcup_(p <- primes #|A|) Elem_order p n A.

Definition Elem_max p A :=
  [set E : {group gT} | [max E | (E \subset A) && abelem p E]].

Definition p_rank p A := \max_(E \in Elem p A) logn p #|E|.

Definition rank A := \max_(p <- primes #|A|) p_rank p A.

(*
Definition basis A X :=
   (1 \notin X) && (\big[direct_product/1]_(x \in X) <[x]> == A).


Definition abelian_type A :=
  if pick (basis A) is Some X then
    sort leq (maps order (enum (mem X)))
  else [::].

Definition homocyclic A :=
  abelian A && is_pgroup A && seq.constant (abelian_type A).
*)

Canonical Structure p_core_group pi A := Eval hnf in [group of p_core pi A].
Canonical Structure Ohm_group i A := Eval hnf in [group of Ohm i A].
Canonical Structure Mho_group i A := Eval hnf in [group of Mho i A].

End PgroupDefs.

Notation "''O_' pi ( G )" := (p_core pi G)
  (at level 8, pi at level 2, format "''O_' pi ( G )") : group_scope.
Notation "''O_' pi ( G )" := (p_core_group pi G) : subgroup_scope.

Notation "''Ohm_' i ( G )" := (Ohm i G)
  (at level 8, i at level 2, format "''Ohm_' i ( G )") : group_scope.
Notation "''Ohm_' i ( G )" := (Ohm_group i G) : subgroup_scope.

Notation "''Mho^' i ( G )" := (Mho i G)
  (at level 8, i at level 2, format "''Mho^' i ( G )") : group_scope.
Notation "''Mho^' i ( G )" := (Mho_group i G) : subgroup_scope.

Notation "''E_' p ( G )" := (Elem p G)
  (at level 8, p at level 2, format "''E_' p ( G )") : group_scope.

Notation "''E_' p ^ n ( G )" := (Elem_order p n G)
  (at level 8, p, n at level 2, format "''E_' p ^ n ( G )") : group_scope.

Notation "''E' ^ n ( G )" := (Elem_rank n G)
  (at level 8, n at level 2, format "''E' ^ n ( G )") : group_scope.

Notation "''E_' p ^* ( G )" := (Elem_max p G)
  (at level 8, p at level 2, format "''E_' p ^* ( G )") : group_scope.

Notation "''Syl_' p ( G )" := (Syl p G)
  (at level 8, p at level 2, format "''Syl_' p ( G )") : group_scope.

Notation "''Hall_' pi ( G )" := (Hall pi G)
  (at level 8, pi at level 2, format "''Hall_' pi ( G )") : group_scope.

Section PlengthDefs.

Variable gT : finGroupType.
Implicit Type A B : {set gT}.

Definition p_core_mod pi A B := coset_of B @*^-1 'O_pi(A / B).

Canonical Structure p_core_mod_group pi A B :=
  Eval hnf in [group of p_core_mod pi A B].

Definition p_length_1 (p : nat) A :=
  trivg (p_core_mod p^' A (p_core_mod p A 'O_p^'(A))).

End PlengthDefs.

(* Coq's n-ary notation facility is too broken to be used here. *)
Notation "''O_{' p1 , p2 } ( A )" := (p_core_mod p2 A 'O_p1(A))
  (at level 8, format "''O_{' p1 ,  p2 } ( A )") : group_scope.
Notation "''O_{' p1 , p2 , p3 } ( A )" := (p_core_mod p3 A 'O_{p1, p2}(A))
  (at level 8, format "''O_{' p1 ,  p2 ,  p3 } ( A )") : group_scope.
Notation "''O_{' p1 , p2 } ( A )" :=
  (p_core_mod_group p2 A 'O_p1(A)) : subgroup_scope.
Notation "''O_{' p1 , p2 , p3 } ( A )" :=
  (p_core_mod_group p3 A 'O_{p1, p2}(A)) : subgroup_scope.

Section PgroupProps.

Variable gT : finGroupType.
Implicit Type pi : nat_pred.
Implicit Type p : nat.
Implicit Types x y z : gT.
Implicit Types A B C D : {set gT}.
Implicit Types G H K P Q : {group gT}.

Lemma pgroupP : forall pi G,
  reflect (forall p, prime p -> p %| #|G| -> p \in pi) (pgroup pi G).
Proof. move=> pi G; exact: p_natP. Qed.

Lemma p_indexP : forall pi G H,
  reflect (forall p, prime p -> p %| #|G : H| -> p \in pi) (p_nat pi #|G : H|).
Proof. move=> pi G H; exact: p_natP. Qed.

Lemma pgroup1 : forall pi, @pgroup gT pi 1.
Proof. by move=> pi; rewrite /pgroup cards1. Qed.

Lemma pgroup_is_pgroup : forall p P, pgroup p P -> is_pgroup P.
Proof.
move=> p P; rewrite /is_pgroup /pdiv /pgroup /p_nat ltn_0group /=.
by case: primes => //= q prP; case/andP; move/(q =P p)->; rewrite inE /= eqxx.
Qed.

Lemma is_pgroupP : forall P, is_pgroup P -> exists2 p, prime p & pgroup p P.
Proof.
move=> P; case: (ltnP 1 #|P|); first by move/prime_pdiv; exists (pdiv #|P|).
rewrite -trivg_card; move/trivgP=> -> _; exists 2 => //; exact: pgroup1.
Qed.

Lemma hallE : forall pi G H,
  hall pi G H = [&& H \subset G, pgroup pi H & p_nat pi^' #|G : H|].
Proof.
move=> pi G H; apply/andP/andP; case=> sHG.
  move/eqP=> hallH; split; rewrite -?group_divn // /pgroup.
  by rewrite -(@p_partC pi #|G|) // hallH divn_mulr ?p_nat_part.
case/andP=> piH copiH; split=> //.
rewrite -(LaGrange sHG) p_part_mul ?LaGrange //.
by rewrite part_p_nat ?part_p'_nat ?muln1.
Qed.

Lemma hall_is_hall : forall pi G H, hall pi G H -> is_hall G H.
Proof.
move=> pi G H; rewrite hallE; case/and3P=> sHG piH copiH.
rewrite /is_hall sHG; exact: p_nat_coprime piH copiH.
Qed.

Lemma is_hall_primes : forall G H,
  is_hall G H -> hall [pred p \in primes #|H|] G H.
Proof.
move=> G H; case/andP=> sHG coHG.
by rewrite hallE sHG /pgroup p_nat_primes -?coprime_primes'.
Qed.

Lemma is_hall_hall : forall G H, is_hall G H -> exists pi, hall pi G H.
Proof.
move=> G H hallH; exists [pred p \in primes #|H|]; exact: is_hall_primes.
Qed.

Lemma sylowE : forall A B p,
  sylow p A B = (B \subset A) && (#|B| == p_part p #|A|).
Proof. by move=> A B p; congr (_ && _ ); rewrite -p_part_pi. Qed.

Lemma pgroup_sylow : forall A B p, sylow p A B -> pgroup p B.
Proof.
move=> A B p; case/andP=> _; rewrite /pgroup; move/eqP->; exact: p_nat_part.
Qed.

Lemma is_sylowE : forall G P, is_sylow G P = is_pgroup P && is_hall G P.
Proof.
move=> G P; apply/idP/andP=> [sylP|[pgP]].
  split; move: sylP; last exact: hall_is_hall.
  by rewrite [is_sylow G P]hallE; case/and3P.
move/is_hall_primes; rewrite hallE; case/and3P=> sPG _; case/andP=> _ q'GP.
rewrite [is_sylow G P]hallE; apply/and4P; split=> //.
apply/allP=> q pr_q; apply: contra (allP q'GP _ pr_q) => /=; move/eqnP=> def_q.
move: pr_q; rewrite !mem_primes ltn_0group // {4}def_q dvdn_pdiv !andbT.
by case/andP.
Qed.

Lemma is_sylowP : forall G P,
  reflect (exists2 p, prime p & sylow p G P) (is_sylow G P).
Proof.
move=> G P; case (ltnP 1 #|P|) => [lt1P |].
  apply: (iffP idP) => [|[p pr_p sylP]].
    by exists (pdiv #|P|); first exact: prime_pdiv.
  suff def_p: p = pdiv #|P| by rewrite def_p in sylP.
  rewrite [sylow p G P]hallE in sylP; case/and3P: sylP=> _; case/andP=> _.
  by move/allP; rewrite -primes_pdiv in lt1P; move/(_ _ lt1P); move/eqnP.
rewrite -trivg_card; move/trivgP->.
rewrite /is_sylow sylowE sub1G cards1 p1_part lognE; left.
pose p := pdiv #|G|.+1; have pr_p: prime p by rewrite prime_pdiv ?ltnS.
exists p; rewrite // sylowE sub1G cards1 p1_part lognE pr_p /= andbC.
have: p %| #|G| + 1 by rewrite addn1 dvdn_pdiv.
rewrite {1}/dvdn; case: dvdnP => // [] [q ->].
by rewrite modn_addl_mul modn_small ?prime_gt1.
Qed.

Lemma pgroupS : forall pi G H, H \subset G -> pgroup pi G -> pgroup pi H.
Proof. move=> pi G H sHG; apply: p_nat_dvdn; exact: group_dvdn. Qed.

End PgroupProps.

Section ModP.

Variable (gT : finGroupType) (sT : finType).

Variable to : {action gT &-> sT}.

(***********************************************************************)
(*                                                                     *)
(*           The mod p lemma                                           *)
(*                                                                     *)
(***********************************************************************)

Lemma pgroup_fix_mod : forall p (G : {group gT}) (S : {set sT}),
   prime p -> pgroup p G -> [acts (G | to) on S] ->
   #|S| %% p = #|'C_S(G | to)| %% p.
Proof.
move=> p G S prime_p; case/p1_natP=> // n cardG GactS; apply/eqP.
rewrite -(cardsID 'C(G | to)) eqn_mod_dvd (leq_addr, addKn) //.
set S1 := S :\: _; have: [acts (G | to) on S1].
  apply/actsP=> a Ga x; rewrite !in_setD (actsP GactS) //; congr (~~ _ && _).
  by apply: actsP Ga x; rewrite norm_act_fix ?normG.
move/acts_sum_card_orbit <-.
apply big_prop => // [m1 m2|X]; first exact: dvdn_add.
case/imsetP=> x; case/setDP=> _ nfx ->{X}.
have:= dvdn_orbit to G x; rewrite cardG.
case/dvdn_pfactor=> [//|[_|m _ ->]]; last exact: dvdn_mulr.
move/card_orbit1=> fix_x; case/afixP: nfx => a Ga; apply/set1P.
by rewrite -fix_x mem_imset.
Qed.

End ModP.

Section Morphim.

Variables (aT rT : finGroupType) (D : {group aT}) (f : {morphism D >-> rT}).
Implicit Type pi : nat_pred.
Implicit Types G H P : {group aT}.

Lemma morphim_pgroup : forall pi G, pgroup pi G -> pgroup pi (f @* G).
Proof. move=> pi G; apply: p_nat_dvdn; exact: dvdn_morphim. Qed.

Lemma morphim_p_index : forall pi G H,
  H \subset D -> p_nat pi #|G : H| -> p_nat pi #|f @* G : f @* H|.
Proof.
move=> pi G H dH; apply: p_nat_dvdn; apply: dvdn_morphim_index.
by rewrite subIset // orbC dH.
Qed.

Lemma morphim_hall : forall pi G H,
  H \subset D -> hall pi G H -> hall pi (f @* G) (f @* H).
Proof.
move=> pi G H dH; rewrite !hallE; case/and3P=> sHG piH pi'GH.
by rewrite morphimS // morphim_pgroup // morphim_p_index.
Qed.

Lemma morphim_is_hall : forall G H,
   H \subset D -> is_hall G H -> is_hall (f @* G) (f @* H).
Proof.
move=> G H dH; case/is_hall_hall=> pi hallH; apply: (@hall_is_hall _ pi).
exact: morphim_hall.
Qed.

Lemma morphim_sylow : forall p G P,
  P \subset D -> sylow p G P -> sylow p (f @* G) (f @* P).
Proof. move=> p; exact: morphim_hall. Qed.

Lemma morphim_is_pgroup : forall P, is_pgroup P -> is_pgroup (f @* P).
Proof. move=> P; move/morphim_pgroup; exact: pgroup_is_pgroup. Qed.

Lemma morphim_is_sylow : forall G P,
  P \subset D -> is_sylow G P -> is_sylow (f @* G) (f @* P).
Proof.
move=> G P dP; rewrite !is_sylowE; case/andP=> pP hallP.
by rewrite morphim_is_pgroup // morphim_is_hall.
Qed.

End Morphim.

Section PiCoreProps.

Variable gT : finGroupType.
Implicit Type A : {set gT}.
Implicit Types G H : {group gT}.

Lemma core_max : forall pi G, pgroup pi 'O_pi(G) && ('O_pi(G) <| G).
Proof.
move=> pi G; rewrite /'O_pi(G).
apply big_prop => [| A B | H]; last by rewrite genGid.
  by rewrite /(_ <| _) gen0 pgroup1 /pgroup normaliser1 sub1G subsetT.
case/and3P=> piA sAG nAG; case/and3P=> piB sBG nBG.
rewrite -mulgenE -mulgen_idl -mulgen_idr.
apply/and3P; split; last 2 [by rewrite gen_subG subUset sAG].
  have gen_pos: 0 < #|<<_ : {set gT}>>| := pos_card_group _.
  rewrite /pgroup norm_mulgenE ?(subset_trans sAG) //.
  have: p_nat pi (#|<<A>>| * #|<<B>>|) by rewrite p_nat_mul //; exact/andP.
  by rewrite -card_mulG p_nat_mul //; case/andP.
by apply: subset_trans (norm_mulgen _ _); rewrite subsetI nAG.
Qed.

Lemma pgroup_core : forall pi G, pgroup pi 'O_pi(G).
Proof. by move=> pi G; case/andP: (core_max pi G). Qed.

Lemma core_normal : forall pi G, 'O_pi(G) <| G.
Proof. by move=> pi G; case/andP: (core_max pi G). Qed.

Lemma subset_core : forall pi G H,
  pgroup pi H -> H <| G -> H \subset 'O_pi(G).
Proof.
move=> pi G H piH nHG; apply/subsetP=> x Hx; apply: mem_gen; apply/bigcupP.
by exists H; rewrite // piH.
Qed.

Lemma char_core : forall pi G, 'O_pi(G) \char G.
Proof.
move=> pi G.
have sOG: 'O_pi(G) \subset G by case/andP: (core_normal pi G).
apply/charP; split=> //= f injf fG; apply/morphim_fixP=> //.
apply: subset_core; first by rewrite morphim_pgroup ?pgroup_core.
by rewrite -{3}fG  morphim_normal ?core_normal.
Qed.

Lemma Cauchy : forall p G, prime p -> p %| #|G| -> {x | x \in G & #[x] = p}.
Proof.
move=> p G pr_p; elim: {G}_.+1 {-2}G (ltnSn #|G|) => // n IHn G; rewrite ltnS.
pose xpG := [pred x \in G | #[x] == p] => leGn pG.
case: (pickP xpG) => [x|no_x]; first by case/andP=> Gx; move/eqP; exists x.
have{pG n leGn IHn} pZ: p %| #|'C_G(G)|.
  have:= pG; rewrite -(cardsID 'C(G)) dvdn_addl //.
  have: [acts (G | 'J) on G :\: 'C(G)]; last move/acts_sum_card_orbit <-.
    by apply/actsP=> x Gx y; rewrite !inE -!mem_conjgV -centJ conjGid ?groupV.
  apply big_prop => // [|C]; first exact: dvdn_add.
  case/imsetP=> x; case/setDP=> Gx nCx ->{C}; rewrite card_orbit conjg_astab1.
  move: pG; rewrite -(LaGrange (subsetIl G 'C[x]%G)) euclid //; case/orP => //.
  case/IHn=> [|y]; last first.
    by case/setIP=> Gy _; move/eqP=> oyp; case/andP: (no_x y).
  apply: leq_trans leGn; apply: proper_card; rewrite properE subsetIl.
  by rewrite subsetI subset_refl /= -cent_set1 centsC sub1set.
suff: predC1 p p by case/eqP.
have: pgroup p^' 'O_p^'(G) by exact: pgroup_core.
move/pgroupP; apply=> //; apply: dvdn_trans pZ (group_dvdn _).
apply/subsetP=> x; case/setIP=> Cx Gx.
rewrite -sub1set -gen_subG subset_core //; last first.
  rewrite /(_ <| _) cycle_h // (subset_trans _ (norm_gen _)) //.
  by rewrite -cent_set1 centsC sub1set.
apply/pgroupP=> q _ p_x; apply/eqP=> def_q; rewrite {q}def_q in p_x.
case/dvdnP: p_x => m ox; case/idP: (no_x (x ^+ m)) => /=.
have m_pos: 0 < m by rewrite -(ltn_pmul2r (ltn_0prime pr_p)) -ox ltn_0order.
by rewrite /= groupX //= order_gcd // [#[x]]ox gcdnC gcdn_mulr divn_mulr.
Qed.

End PiCoreProps.

Section OhmProps.

Variable gT : finGroupType.
Implicit Type A : {set gT}.
Implicit Type G H E : {group gT}.
Implicit Type pi : nat_pred.

Lemma char_Ohm : forall i G, 'Ohm_i(G) \char G.
Proof.
move=> i G; have sOmG: 'Ohm_i(G) \subset G.
  by rewrite gen_subG; apply/subsetP=> x; rewrite inE; case/andP.
apply/charP; split=> // f injf fG; apply/morphim_fixP => //.
rewrite sub_morphim_pre // gen_subG; apply/subsetP=> x; rewrite inE.
case/andP=> Gx oxp; rewrite !inE Gx mem_gen // inE eq_sym -{2}fG.
by rewrite mem_imset ?setIid //= -morphX // (eqP oxp) morph1.
Qed.

Lemma char_Mho : forall i G, 'Mho^i(G) \char G.
Proof.
move=> i G; have sMhoG: 'Mho^i(G) \subset G.
  rewrite gen_subG; apply/subsetP=> y; case/imsetP=> x Gx ->; exact: groupX.
apply/charP; split=> // f injf fG; apply/morphim_fixP => //.
rewrite sub_morphim_pre // gen_subG; apply/subsetP=> y; rewrite !inE.
case/imsetP=> x Gx ->; rewrite groupX // morphX // mem_gen //.
by apply/imsetP; exists (f x); rewrite // -{2}fG morphimEdom mem_imset.
Qed.

Lemma dvdn_exponent : forall x G, x \in G -> #[x] %| exponent G.
Proof.
move=> x G Gx; have def1: 1%N = \big[lcmn/0]_(x <- [::1] | x \in G) #[x].
  by rewrite unlock /= group1 order1.
rewrite /exponent def1 -big_cat_nested big_cat /= -{}def1.
rewrite lcmnC (bigD1 1) // lcmnA order1 -[lcmn 1 1](order1 gT) -bigD1 //=.
rewrite (bigD1 x) //=.
case: {+}(reducebig _ _ _ _ _) => [|m]; first by rewrite lcmn0.
rewrite -(@dvdn_pmul2r (gcdn #[x] m.+1)) ?ltn_0gcd ?orbT //.
by rewrite muln_lcm_gcd ?dvdn_pmul2l ?ltn_0order // dvdn_gcdr.
Qed.

Lemma exponentP : forall G n,
  reflect (forall x, x \in G -> x ^+ n = 1) (exponent G %| n).
Proof.
move=> G n; apply: (iffP idP) => [eGn x Gx | eGn].
  apply/eqP; rewrite -order_dvd; apply: dvdn_trans eGn; exact: dvdn_exponent.
rewrite /exponent; apply big_prop=> [|p q pn qn|x Gx]; last 1 first.
- by rewrite order_dvd eGn.
- exact: dvd1n.
case: (posnP p) => [-> | p_pos]; first by rewrite lcm0n.
case: (posnP q) => [-> | q_pos]; first by rewrite lcmn0.
rewrite -(@dvdn_pmul2r (gcdn p q)) ?ltn_0gcd ?p_pos ?muln_lcm_gcd //.
case/dvdnP: pn qn => r -> qr; rewrite -mulnA mulnCA dvdn_pmul2l //.
case: (bezoutr p q_pos) => m _; move/(dvdn_mull r).
by rewrite muln_addr mulnCA dvdn_addl // dvdn_mull.
Qed.

Lemma trivg_exponent : forall G, trivg G = (exponent G %| 1).
Proof.
move=> G.
by apply/subsetP/exponentP=> trG x; move/trG; rewrite expg1; move/set1P.
Qed.

Lemma exponent1 : exponent (1 : {set gT}) = 1%N.
Proof. by apply/eqP; rewrite -dvdn1 -trivg_exponent trivg1. Qed.

Lemma exponent_dvdn : forall G, exponent G %| #|G|.
Proof.
by move=> G; apply/exponentP=> s Gx; apply/eqP; rewrite -order_dvd order_dvd_g.
Qed.

Lemma ltn_0exponent : forall G, 0 < exponent G.
Proof. move=> G; exact: ltn_0dvd (exponent_dvdn G). Qed.
Hint Resolve ltn_0exponent.

Lemma pi_exponent : forall pi G, p_nat pi (exponent G) = pgroup pi G.
Proof.
move=> pi G; rewrite /pgroup /p_nat ltn_0group ltn_0exponent; congr all.
apply/eq_primes=> p; rewrite !mem_primes ltn_0group ltn_0exponent /=.
case pr_p: (prime p) => //=; apply/idP/idP=> pG.
  exact: dvdn_trans pG (exponent_dvdn G).
case/Cauchy: pG => // x Gx <-; exact: dvdn_exponent.
Qed.

Lemma pgroup_abelem : forall p E, prime p -> abelem p E -> pgroup p E.
Proof.
move=> p E pr_p; case/andP=> _ pE; rewrite -pi_exponent.
by apply: p_nat_dvdn pE _; rewrite p_nat_prime //= inE /=.
Qed.

Lemma abelemP : forall E,
  reflect (exists2 p, prime p & abelem p E) (elementary_abelian E).
Proof.
rewrite /elementary_abelian => E; case: (leqP #|E| 1).
  rewrite -trivg_card; move/trivgP->.
  by rewrite /abelem /abelian sub1G exponent1 cards1; left; exists 2.
move/prime_pdiv; set q := pdiv _ => pr_q; apply: (iffP idP); first by exists q.
case=> p pr_p pE; move/pgroupP: (pgroup_abelem pr_p pE).
by move/(_ q pr_q (dvdn_pdiv _)); move/eqnP->.
Qed.

Lemma abelem_Ohm1P : forall E,
  abelian E -> reflect ('Ohm_1(E) = E) (elementary_abelian E).
Proof.
move=> E abelE; pose p := pdiv #|E|; pose E1 := [set x \in E | x ^+ p == 1].
have gE1: group_set E1.
  apply/group_setP; split=> [|x y]; rewrite !inE ?(exp1gn, group1) //=.
  case/andP=> Ex; move/eqP=> xp; case/andP=> Ey; move/eqP=> yp.
  rewrite groupM // expMgn ?(xp, yp, mulg1) //=; exact: (centsP abelE).
have ->: 'Ohm_1(E) = E1.
  apply/eqP; rewrite eqset_sub -{1}[E1](genGid (Group gE1)) genS.
    apply/subsetP=> x; rewrite /= !inE; case/andP=> Ex.
    by move=> xp; rewrite mem_gen // inE Ex expn1.
  by apply/subsetP=> x; rewrite !inE; case/andP=> ->; rewrite expn1.
rewrite /elementary_abelian /abelem -/p abelE.
apply: (iffP (exponentP _ _)) => [elemE | <- x].
  apply/setP=> x; rewrite inE; case Ex: (x \in E) => //=.
  apply/eqP; exact: elemE.
by rewrite inE; case/andP=> _; move/eqP.
Qed.

Lemma mem_Elem1 : forall G E,
  reflect (E \subset G /\ exists2 p, prime p & #|E| = p) (E \in 'E^1(G)).
Proof.
move=> G E; rewrite ['E^1(G)](big_sub 0) big_mkord.
apply: (iffP (bigcupP _ _ _)) => [/= [i _]|[sEG [p pr_p pE]]].
  set p := sub 0 _ i; have: p \in primes #|G| by rewrite mem_sub.
  rewrite inE -andbA expn1 mem_primes; case/andP=> pr_p _.
  by case/and3P; split=> //; exists p; last exact/eqP.
have pG: p \in primes #|G|.
  by rewrite mem_primes pr_p ltn_0group -pE group_dvdn.
have:= pG; rewrite -index_mem => lt_i; exists (Ordinal lt_i) => //=.
rewrite sub_index // inE sEG pE expn1 eqxx /= -andbA -pE exponent_dvdn !andbT.
case/primeP: pr_p => lt1p pr_p.
have: ~~ trivg E by rewrite trivg_card -ltnNge pE.
case/subsetPn=> x Ex nx1.
suff <-: <[x]> = E by apply/centsP; apply: commute_cycle_com.
apply/eqP; rewrite eqset_sub_card gen_subG sub1set Ex.
have:= order_dvd_g Ex; rewrite pE; move/pr_p; rewrite eqn_leq -trivg_card.
rewrite [trivg _]gen_subG sub1set (negPf nx1) /=; move/eqP=> <-; exact: leqnn.
Qed.

End OhmProps.

